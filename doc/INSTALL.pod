
=head1 Installation Instructions

Occassionally, some challenges are discussed, and the solutions
to them are based on RHEL distros.  These are rare, but do not
cover other *NIX distros.

=head2 Overview

You need:

=over

=item * 

one or more BIND resolvers using RPZ

=item * 

an Apache web server's default virtual site to serve as your Walled Garden.
It must be a default site, as this is where the CNAME redirects from from
all the 'nasty' domains.  It must accept all of them.

=item * 

a system on which to run the analysis web site (can be the same Apache
as the server listed above)

=item * 

a database into which to store the log data (currently must be PostreSQL)

=back

You will then:

=over

=item * 

create the database structures and permissions in you database, and 
upload the sample data

=item * 

install the analysis site, and test that it shows the sample data

=item *

clear the sample data

=item * 

install the log scrapers on your resolver(s)

=item * 

install the log scraper on you Walled Garden

=item *

watch who is asking for resolution of nasty sites ans following CNAMEs
to your Walled Garden

=back

=head2 Creating the Database

RPZLA currently only supports PostgreSQL (but adding support for
other databases should be easy, contact the community).  Here we
create a database and user access.  Note that you need for 
your analysis web site to be able to query this database.  Hence,
you may need to modify PostreSQL's security and/or Firewalls to 
allow this.  How to do that is beyond the scope of this presentation.

RPZLA uses a least privilege model.  The Loggers need to insert
data, and the Analysis site needs to query it.  Thus, there 
are two 'users' each given only the privileges required for 
their purpose.  The config for the 'log' type user is needed on
all resolvers, and the walled garden.  The 'analysis' type user
is needed on the analysis site.

=head3 Set the credentials in the config file and install it

	 cd ./etc/
	 vi rpzla.conf # set the credential for 'log' and 'analysis'
	 sudo make install # copies rpzla.conf to /etc/rpzla

=head3 Create the Tables and Views, and Uploading Sample Data

See the doco in rpzla/db/postrgresql/README.pod

Summary:

	cd db/postgresql
	sudo ./db_all.sh

If the system on which you have just created the database is only
the database server (no resolvers or web sites (walled garden or
analysis)) you can then actually delete the config:

	rm /etc/rpzla/rpzla.conf ; rmdir /etc/rpzla

=head2 Creating the Analysis Site

B<NOTE>: The RPZLA Analysis site does not currently do any authentication
based restrictions.  Implement as you wish with Apache (LDAP, .htaccess,
etc.).

On the web server:

Before you do anything, you need perl 5.10.1 or later.  Get it.
(This can be troublesome on RHEL5)

=head3 Prerequisite: Install Mojolicious

	 sudo -s 'curl -L cpanmin.us | perl - Mojolicious'

You may get build failures (I did on RHEL 6).  To fix you need
some missing Perl modules which you can grab from CPAN.

	sudo yum -y install perl-devel perl-CPAN

Do the CPAN setup and config (perl -MCPAN -e shell)
Then:

	sudo perl -MCPAN -e shell
	# much config ...
	cpan> install Test::More and Time::HiRes
	.
	.
	.
	cpan> quit

Retry the install of Mojolicious:

	sudo -s 'curl -L cpanmin.us | perl - Mojolicious'
	.
	.
	.
	Configuring Mojolicious-2.57 ... OK
	Building and testing Mojolicious-2.57 ... OK
	Successfully installed Mojolicious-2.57
	1 distribution installed

Done.

=head3 Installing the Analysis Site (Apache + CGI)

Edit the Apache config to define the virtual host.

Change ServerName, ServerAdmin, DocumentRoot, ScriptAlias, and 
*Log values to suite your environment:

	<VirtualHost *:80>
		# Edit these to suit your deployment
		ServerName rpzla.your.domain
		ServerAdmin webmaster@localhost
		DocumentRoot /var/www/html/rpzla 
		ScriptAlias / /var/www/html/rpzla/rpzla.cgi/
		ErrorLog logs/rpzla-error_log
		CustomLog logs/rpzla-access_log common
		# Below are static values, dont change
		AddHandler cgi-script .cgi
		Options +ExecCGI
		IndexIgnore *
	</VirtualHost>

Then, adjust the install location in the Makefile and install
the Analysis site code:

	 cd web/analyse
	 vi Makefile   # set the CGI_DIR to be the document root for the site
	 sudo make install

And finally, SELinux may bite your arse: disable (or make permissive,
or actually specify that the httpd spawned CGI process can make
a network connection to the RDBMS).

Mojolicious is helpful in identifying things that fail.  Identitifying
that it is SELinux that is the cause can take a little longer.  By
elimination logic, if you can make the database connection on the 
command-line using the credentials in the rpzla.conf file, but the 
web site can't then you have a restriction specific to the web-site.

=head3 TESTING

If you have uploaded the sample data, now is the time to check the
analysis web-site.

=head2 Creating the Walled Garden (Warning Site)

The Walled Garden must be a B<default virtual sit>e on an Apache server.

RPZLA comes with a customisable Walled Garden, but you can do whatever
you want.  The key element is the way you log visits to the site which
will then be used by the Apache log scrapper (install of that described
below).

The simplest solution (apart from the RPZLA included mechanism) is a
static HTML page.  Its enough to inform your organisation and make the 
log data that we need.

There is work to be done here.  It would be nice to have a site with
more smarts that displays lots of client information and has a 'email
IT' button which they can use to inform your IT group of their worry
and concern.

The RPZLA template does not have this type of functionality yet. :-(

=head3 Log Format

Whatever you do, the format of the Apache Log is essential.  It must
be defined, and then used in the site definition.  No choice here.

=head4 Define the Log Format

In the Apache config, generally in the area where all the alternate
log styles are defined, add:

	LogFormat "%{%d-%b-%Y %T}t %a %h %V %>s \"%r\"" rpz_log

The name 'rpz_log' can be whatever you want.  But, you must use
it in the WalledGarden's definition.  The format string is B<fixed>.

=head4 Walled Garden Log type Definition

Within the definition of the Walled Garden site it must declare
that it will use the previously defined log format:

	CustomLog <some-path> rpz_log

The <some-path> resolves to a full system path.  For example,
on RHEL logs/walled_garden-access_log resolves to:

	/var/log/httpd/walled_garden-access_log

The this full path (whatever it is on your system) must be defined 
in the rpzla.conf so that the log scraper knows which file it must watch.

E.g in the /etc/rpzla/rpzla.conf file:

	<walled-garden>
		log	=	/var/log/httpd/walled_garden-access_log
	</walled-garden>

The flow is: define the format, use it in the Walled Garden site
definition, tell the Log Scrapper where it is, the data ends up
in the RDBMS, and they you can see it on the Analysis site.

=head2 Setting up Log Scrappers

B<NOTE>: The init scripts are untested.  Work to be done.

In all cases (BIND and Apache scrapers) you the perl Daemon::Daemonize 
library must be available.  If not, install from CPAN:

	perl -MCPAN -e shell
	cpan> install Daemon::Daemonize
	...
	cpan> quit

=head3

Have a look at the README.pod in the rpzla/etc.  You'll be removing
un-needed info from the rpzla.conf file during each install of a logger.

=head3 BIND Scrappers

For each resolver:

	make bind

Note: This does not make BIND, just the RPZLA BIND log scrapper.

=head3 Apache (Walled Garden) Scrapper

On the Walled Garden system:

	make apache

Note: This does not make Apache, just the RPZLA Apache log scrapper.
