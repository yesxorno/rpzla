#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long qw(:config default no_ignore_case);
use Pod::Usage;
use File::Basename;
use English;
use Carp;
use RPZLA::Scraper::BIND;

# command-line options
use constant OPT_CONFIG		=> 'config';
use constant OPT_DEBUG		=> 'debug';
use constant OPT_HELP           => 'help';
use constant OPT_MANUAL		=> 'manual';
use constant OPT_TEST		=> 'test';
use constant OPT_VERSION        => 'Version';

use constant CONFIG_DEFAULT	=> '/etc/rpzla/rpzla.conf';

my $version = '0.1';
my $ME = basename($PROGRAM_NAME);
my %options;
my $parse = GetOptions
(
        \%options,
        OPT_CONFIG() . '=s',
        OPT_DEBUG(),
        OPT_HELP() . '|?',  # allow -? or --? for help
        OPT_MANUAL(),
        OPT_TEST(),
        OPT_VERSION(),
);

# our scraper object
my $scraper = undef;

sub parse_command_line()
{
        my $retval = 1;
        if ( !$parse )
        {
                pod2usage(2);
        }
        elsif ( $options{OPT_HELP()} )
        {
                pod2usage(0);
        }
        elsif ( $options{OPT_MANUAL()} )
        {
                pod2usage(-exitstatus => 0, -verbose => 2);
        }
        elsif ( $options{OPT_VERSION()} )
        {
                print "$ME v$version\n";
                exit(0);
        }
        if ( !defined($options{OPT_CONFIG()}) )
        {
                $options{OPT_CONFIG()} = CONFIG_DEFAULT();
        }
	if ( ! -f $options{OPT_CONFIG()} or ! -r $options{OPT_CONFIG()} )
	{
		croak("Config file argument '" . $options{OPT_CONFIG()} . 
			"' does not exist or cant be read.");
	}
        return $retval;
}

sub sig_stop($) { my $sig = shift; $scraper->sig_stop($sig); }
sub sig_reload($) { my $sig = shift; $scraper->sig_reload($sig); }

$SIG{INT} = $SIG{TERM} = \&sig_stop;
$SIG{HUP} = \&sig_reload;

sub main()
{
	my $retval = 1;
	$scraper = RPZLA::Scraper::Aapche->new
	(
		ident		=> $ME,
		config_path 	=> $options{OPT_CONFIG()},
		debug_mode	=> $options{OPT_DEBUG()},
		test_mode 	=> $options{OPT_TEST()},
	);
	$scraper->init();
	$scraper->main_loop();
	# UNREACHED
	return $retval;
}

parse_command_line();

exit( main() ? 0 : 1 );

# UNREACHED

__END__

=head1 NAME

rpzla-apache - transfer Apache log entries to the RPZLA database

=head1 SYNOPSIS

        rpzla-apache <-h|-m|-V>
or
        rpzla-apache [-d] [-t] [-c /path/to/config]

=head1 DESCRIPTION

rpzla-apache watches the apache log as defined in the config
and extracts logs that indicate someone visiting the site because
of RPZ domain name redirection.  These logs are then transferred
to the RPZLA database, also as defined in the config.

The format of the apache log file is important.  See the general
RPZLA documentation for more details.

The tool *requires* that you use the following log format in your
site definition:

	LogFormat "%{%d-%b-%Y %T}t %a %h %V %>s \"%r\"" rpz_log

	CustomLog logs/some-path rpz_log

It is useful (though costs a penalty) if you have:

	HostnameLookups On

All error and informational messages are sent to the system log.

rpzla-apache is expected to be run as a daemon launched by init.

=head1 OPTIONS

=over

=item B<-c, --config>

The path to the config file.  Defaults to /etc/rpzla/rpzla.conf

=item B<-d, --debug>

Debug mode.  When deamonising send stderr to /tmp/rpzla-apache.err.
All info and regular error messages are still sent to syslog.

=item B<-h, -?, --help>

Prints a help message.

=item B<-m, --man, --manual>

Prints the B<manual page>.

=item B<-t, --test>

Test mode.  Will only check that the log file, and database, as
specified in the config can be read and connected to, respectively,
and then exit.

Can be combined with --debug.

=item B<-V, --Version>

Print the software version.

=back

=head1 SEE ALSO

rpzla.conf

https://github.com/yesxorno/rpzla.git

=head1 AUTHOR

Hugo M. Connery

=head1 LICENSE

GNU Public License version 2. (GPLv2)

=cut

